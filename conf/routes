# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Enable webjar based resources to be returned
GET           /webjars/*file                                      controllers.WebJarAssets.at(file)

# Home page
GET           /                                                   controllers.Application.index
POST          /login                                              controllers.Application.login
GET           /ping                                               controllers.Application.ping
POST          /logout                                             controllers.Application.logout

# User
GET           /user                                               controllers.admin.UserController.index(jobNo: Option[String], page: Int ?=0, pageSize: Int ?=10)
GET           /user/total                                         controllers.admin.UserController.count(jobNo: Option[String])
GET           /user/:jobNo                                        controllers.admin.UserController.show(jobNo: String)
DELETE        /user/:jobNo                                        controllers.admin.UserController.delete(jobNo: String)
POST          /user                                               controllers.admin.UserController.save
PUT           /user/:jobNo                                        controllers.admin.UserController.update(jobNo: String)

# Area
GET           /area                                               controllers.admin.AreaController.all
GET           /area/list                                          controllers.admin.AreaController.list(envId: Int ?=0)
GET           /area/:id                                           controllers.admin.AreaController.get(id: Int)
GET           /area/:id/refresh                                   controllers.admin.AreaController.refresh(id: Int)
POST          /area                                               controllers.admin.AreaController.save
PUT           /area                                               controllers.admin.AreaController.update
DELETE        /area/:id                                           controllers.admin.AreaController.delete(id: Int)

# Environment
GET           /env                                                controllers.admin.EnvController.index(page: Int ?=0, pageSize: Int ?=10)
GET           /env/total                                          controllers.admin.EnvController.count
GET           /env/all                                            controllers.admin.EnvController.all
GET           /env/my                                             controllers.admin.EnvController.my(jobNo: String)
GET           /env/allScriptVersion                               controllers.admin.EnvController.allScriptVersion
GET           /env/:id                                            controllers.admin.EnvController.show(id: Int)
DELETE        /env/:id                                            controllers.admin.EnvController.delete(id: Int)
POST          /env                                                controllers.admin.EnvController.save
PUT           /env/:id                                            controllers.admin.EnvController.update(id: Int)
# Environment member
GET           /env/:envId/members                                 controllers.admin.EnvController.members(envId: Int)
GET           /env/:envId/member/:jobNo                           controllers.admin.EnvController.member(envId: Int, jobNo: String)
POST          /env/:envId/member                                  controllers.admin.EnvController.saveMember(envId: Int, jobNo: String)
PUT           /env/member/:memberId                               controllers.admin.EnvController.updateMember(memberId: Int, op: String)

# Spirit
GET           /spirit                                             controllers.admin.SpiritController.all
GET           /spirit/:id                                         controllers.admin.SpiritController.get(id: Int)
GET           /spirit/refresh/:id                                 controllers.admin.SpiritController.refresh(id: Int)
DELETE        /spirit/:id                                         controllers.admin.SpiritController.delete(id: Int)
POST          /spirit                                             controllers.admin.SpiritController.add
PUT           /spirit/:id                                         controllers.admin.SpiritController.update(id: Int)

# Project
GET           /project                                            controllers.admin.ProjectController.index(projectName: Option[String], templateId: Option[Int], page: Int ?=0, pageSize: Int ?=30)
GET           /project/total                                      controllers.admin.ProjectController.count(projectName: Option[String], templateId: Option[Int])
GET           /project/all                                        controllers.admin.ProjectController.all
GET           /project/my                                         controllers.admin.ProjectController.my(jobNo: String)
GET           /project/allExceptSelf/:id                          controllers.admin.ProjectController.allExceptSelf(id: Int)
GET           /project/atts                                       controllers.admin.ProjectController.atts(projectId: Int)
GET           /project/vars                                       controllers.admin.ProjectController.vars(projectId: Int, envId: Int)
GET           /project/auth                                       controllers.admin.ProjectController.showAuth(envId: Int)
GET           /project/:id                                        controllers.admin.ProjectController.show(id: Int)
DELETE        /project/:id                                        controllers.admin.ProjectController.delete(id: Int)
POST          /project                                            controllers.admin.ProjectController.save
PUT           /project/:projectId                                 controllers.admin.ProjectController.update(projectId: Int, envId: Int)
POST          /project/addCluster                                 controllers.admin.ProjectController.addCluster
DELETE        /project/removeCluster/:clusterId                   controllers.admin.ProjectController.removeCluster(clusterId: Int)
# Project member
GET           /project/:projectId/members                         controllers.admin.ProjectController.members(projectId: Int)
GET           /project/:projectId/member/:jobNo                   controllers.admin.ProjectController.member(projectId: Int, jobNo: String)
POST          /project/:projectId/member                          controllers.admin.ProjectController.saveMember(projectId: Int, jobNo: String)
PUT           /project/member/:memberId                           controllers.admin.ProjectController.updateMember(memberId: Int, op: String)

# Template
GET           /tempalte/all                                       controllers.admin.TemplateController.all
GET           /tempalte/itemAttrs                                 controllers.admin.TemplateController.itemAttrs(templateId: Int, scriptVersion: String)
GET           /tempalte/itemVars                                  controllers.admin.TemplateController.itemVars(templateId: Int, scriptVersion: String)
GET           /tempalte/:templateId/items                         controllers.admin.TemplateController.items(templateId: Int)
GET           /tempalte/:id                                       controllers.admin.TemplateController.show(id: Int)
DELETE        /tempalte/:id                                       controllers.admin.TemplateController.delete(id: Int)
POST          /template                                           controllers.admin.TemplateController.save
PUT           /template/:id                                       controllers.admin.TemplateController.update(id: Int)

# Project Version
GET           /project/:projectId/version                         controllers.admin.VersionController.getVersions(projectId: Int, envId: Int)
GET           /project/:projectId/nexusVersion                    controllers.admin.VersionController.nexusVersions(projectId: Int)
GET           /project/:projectId/top                             controllers.admin.VersionController.index(vs: Option[String], projectId: Int, page: Int ?=0, pageSize: Int ?=10)
GET           /project/:projectId/versoin/total                   controllers.admin.VersionController.count(vs: Option[String], projectId: Int)
GET           /project/version/all                                controllers.admin.VersionController.all(pid: Int, top: Int ?=30)
GET           /project/version/:id                                controllers.admin.VersionController.show(id: Int)
DELETE        /project/version/:id                                controllers.admin.VersionController.delete(id: Int)
POST          /porject/version                                    controllers.admin.VersionController.save
PUT           /project/version/:id                                controllers.admin.VersionController.update(id: Int)

# Project Dependency
GET           /project/dependency/:id                             controllers.admin.DependencyController.show(id: Int)
DELETE        /project/removeDependency/:parentId/:childId        controllers.admin.DependencyController.removeDependency(parentId: Int, childId: Int)
POST          /project/addDependency                              controllers.admin.DependencyController.addDependency
POST          /project/updateTemplateProject                      controllers.admin.DependencyController.updateTemplateProject

# Conf
GET           /conf/all                                           controllers.admin.ConfController.all(eid: Int, pid: Int, vid: Int)
GET           /conf/completer                                     controllers.admin.ConfController.completer(envId: Int, projectId: Int, versionId: Int)
GET           /conf/:id                                           controllers.admin.ConfController.show(id: Int)
DELETE        /conf/:id                                           controllers.admin.ConfController.delete(id: Int)
POST          /conf                                               controllers.admin.ConfController.save
POST          /conf/upload                                        controllers.admin.ConfController.upload
POST          /conf/copy                                          controllers.admin.ConfController.copy
PUT           /conf/:id                                           controllers.admin.ConfController.update(id: Int)

# Script
PUT           /script/refresh                                     controllers.admin.ScriptController.refresh

# Conf Log
GET           /conf/:confId/logs                                  controllers.admin.ConfController.logs(confId: Int, page: Int ?=0, pageSize: Int ?=10)
GET           /conf/:confId/logs/total                            controllers.admin.ConfController.logsCount(confId: Int)
GET           /conf/log/:id                                       controllers.admin.ConfController.log(id: Int)

# Relation
GET           /relation                                           controllers.admin.RelationController.index(ip: Option[String], envId: Option[Int], projectId: Option[Int], sort: Option[String], direction: Option[String], page: Int ?=0, pageSize: Int ?=10)
GET           /relation/total                                     controllers.admin.RelationController.count(ip: Option[String], envId: Option[Int], projectId: Option[Int])
GET           /relation/ips                                       controllers.admin.RelationController.ips(envId: Int)
GET           /relation/hosts                                     controllers.admin.RelationController.hosts(envId: Int, areaId: Int)
GET           /relation/:id                                       controllers.admin.RelationController.show(id: Int)
POST          /relation                                           controllers.admin.RelationController.bind
POST          /relation/save                                      controllers.admin.RelationController.save
POST          /relation/save_batch                                controllers.admin.RelationController.saveBatch
PUT           /relation/:id                                       controllers.admin.RelationController.update(id: Int)
DELETE        /relation/:id                                       controllers.admin.RelationController.unbind(id: Int)
DELETE        /relation/:id/remove                                controllers.admin.RelationController.delete(id: Int)

# System
GET           /system                                             controllers.admin.SystemController.index
POST          /system                                             controllers.admin.SystemController.update

# Task
POST          /task/lastStatus                                    controllers.home.TaskController.findLastTaskStatus
GET           /task/lastStatusSpecify                             controllers.home.TaskController.findLastStatus(envId: Int, projectId: Int, clusters: String)
GET           /task/joinProcess/:envId/:projectId                 controllers.home.TaskController.joinProcess(envId: Int, projectId: Int)
POST          /task/newTaskQueue                                  controllers.home.TaskController.createNewTaskQueue
POST          /task/removeTaskQueue                               controllers.home.TaskController.removeTaskQueue(qid: Int)
GET           /task/templates                                     controllers.home.TaskController.getTemplates(scriptVersion: String)
GET           /task/terminate                                     controllers.home.TaskController.forceTerminate(envId: Int, projectId: Int, clusterName: Option[String])
GET           /task/clusters                                      controllers.home.TaskController.findClusterByEnv_Project(envId: Int, projectId: Int)
GET           /task/history                                       controllers.home.TaskController.findHisTasks(envId: Int, projectId: Int)
GET           /task/catalinaWS                                    controllers.home.TaskController.findCatalinaWSUrl(envId: Int)

# Task Log
GET           /task/logHeaderContent                              controllers.home.TaskController.logHeaderContent(envId: Int, proId: Int, taskId: Int, byteSize: Int)
GET           /task/LogReader                                     controllers.home.TaskController.logReader(envId: Int, proId: Int, taskId: Int)

# Logs(user action)
POST          /logs                                               controllers.admin.LogsController.search(page: Int ?=0, pageSize: Int ?=10)
POST          /logs/total                                         controllers.admin.LogsController.count

# Open API
POST          /v1/project/version                                 controllers.admin.ProjectController.addVersion


GET           /javascriptRoutes                                   controllers.Application.javascriptRoutes

GET           /pkgs/*pkg                                          controllers.Application.pkgs(pkg: String)

# Map static resources from the /public folder to the / URL path, webjar
GET           /*file                                              controllers.Assets.at(path="/public", file)
